package com.mycompany.a1;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.ui.plaf.Border;
import com.codename1.charts.util.ColorUtil;
import com.codename1.ui.Button;
import com.codename1.ui.Command;
import com.codename1.ui.Component;
import com.codename1.ui.Container;
import com.codename1.ui.Form;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.events.ActionEvent;
import java.lang.String;



public class Game extends Form{
	private GameWorld gw;
	private MapView mv;
	private ScoreView sv;

	
	public Game() {
		this.setLayout(new BorderLayout());
		
		
		gw=new GameWorld();
		gw.init();
		
		//register observers
		mv=new MapView(gw);
		sv= new ScoreView(gw);
		gw.addObserver(mv);
		gw.addObserver(sv);
		
		//commands
		AboutCommand aboutCmd=new AboutCommand(gw);
		AccelerateCommand accelerateCmd=new AccelerateCommand(gw);
		BrakeCommand brakeCmd=new BrakeCommand(gw);
		DisplayCommand displayCmd=new DisplayCommand(gw);
		ExitCommand exitCmd=new ExitCommand(gw);
		FlagCommand flagCmd=new FlagCommand(gw);
		FoodCommand foodCmd=new FoodCommand(gw);
		GetCommand getCmd=new GetCommand(gw);
		HelpCommand helpCmd=new HelpCommand(gw);
		LeftCommand leftCmd=new LeftCommand(gw);
		MapCommand mapCmd=new MapCommand(gw);
		RightCommand rightCmd=new RightCommand(gw);
		SoundCommand soundCmd=new SoundCommand(gw);
		TickCommand tickCmd=new TickCommand(gw);
		
		//center stuff
		mv.getAllStyles().setBorder(Border.createLineBorder(2, ColorUtil.rgb(255, 0, 0)));
		this.add(BorderLayout.CENTER, mv);
		
		
		//top stuff
		Container topContainer=new Container();
		topContainer.setLayout(new GridLayout(1,6)); //1 row, 6 columns
		topContainer.add(sv);
		this.add(BorderLayout.NORTH, topContainer);
		
		//left stuff
		Container leftContainer=new Container();
		leftContainer.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
		leftContainer.getAllStyles().setPadding(Component.TOP, 50);
		Button accelerateButton=new MyButton(accelerateCmd);
		Button leftButton=new MyButton(leftCmd);
		leftContainer.add(accelerateButton);
		leftContainer.add(leftButton);
		this.add(BorderLayout.WEST, leftContainer);
		
		//right stuff 
		Container rightContainer=new Container();
		rightContainer.setLayout(new BoxLayout(BoxLayout.Y_AXIS));
		rightContainer.getAllStyles().setPadding(Component.TOP, 50);
		Button brakeButton=new MyButton(brakeCmd);
		Button rightButton=new MyButton(rightCmd);
		rightContainer.add(brakeButton);
		rightContainer.add(rightButton);
		this.add(BorderLayout.EAST, rightContainer);
		
		//south stuff
		Container southContainer=new Container();
		southContainer.setLayout(new FlowLayout(Component.CENTER));
		Button flagButton=new MyButton(flagCmd);
		Button getButton=new MyButton(getCmd);
		Button foodButton=new MyButton(foodCmd);
		Button tickButton=new MyButton(tickCmd);
		southContainer.add(flagButton);
		southContainer.add(getButton);
		southContainer.add(foodButton);
		southContainer.add(tickButton);
		this.add(BorderLayout.SOUTH, southContainer);
		
		
		
		//keybinds
		this.addKeyListener('a', accelerateCmd);
		this.addKeyListener('b', brakeCmd);
		this.addKeyListener('l', leftCmd);
		this.addKeyListener('r', rightCmd);
		this.addKeyListener('f', foodCmd);
		this.addKeyListener('g', getCmd);
		this.addKeyListener('t', tickCmd);
		
		//code here to create command objects for each command
		//add commands to side menu and title bar here, bind commands to keys
		//create control containers for the buttons, add buttons to the control containers
		//add commands to the buttons, and add conteol containers, MapView, and ScoreView to the form
		
		this.show();
		//code here to query MapViews width and height and set them as worlds width and height
		
		

		

		
		
		
	}
	
	private void play() {
		//code that goes here is in appendix
		Label myLabel=new Label("Enter a command:");
		this.addComponent(myLabel);
		final TextField myTextField=new TextField();
		this.addComponent(myTextField);
		this.show();
		
		myTextField.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				String sCommand=myTextField.getText().toString();
				myTextField.clear();
				if(sCommand.length()!=0) {
					switch (sCommand.charAt(0)) {
					case 'a':
						gw.accelerate();
						break;
					case 'b':
						gw.brake();
						break;
					case 'l':
						gw.left();
						break;
					case 'r':
						gw.right();
						break;
					case 'f':
						gw.food();
						break;
					case 'g':
						gw.get();
						break;
					case 't':
						gw.tick();
						break;
					case 'd':
						gw.display();
						break;
					case 'm':
						gw.map();
						break;
					case 'x':
						System.out.println("Are you sure you want to exit? (enter 'y' or 'n'):");
						break;
					case 'y':
						System.exit(0);
					case 'n':
						System.out.println("Game continuing");
					case '1':
						gw.flagCollision(1);
						break;
					case '2':
						gw.flagCollision(2);
						break;
					case '3':
						gw.flagCollision(3);
						break;
					case '4':
						gw.flagCollision(4);
						break;
					}
					
					
					
				}
			}
		
		});
		
	}
	
}
